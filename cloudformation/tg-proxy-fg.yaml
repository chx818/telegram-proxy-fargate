AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcId
          - ExistingPublicSubnetOne
          - ExistingPublicSubnetTwo
      - 
        Label: 
          default: "Amazon ECS Configuration"
        Parameters: 
          - ServiceName
          - ImageUrl
          - ContainerPort
          - ContainerCpu
          - ContainerMemory
          - DesiredCount
          - Role
      -
        Label:
          default: "Telegram Proxy Configuration"
        Parameters:
          - SharedSecret

Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.100.0/24'
    PublicTwo:
      CIDR: '10.0.101.0/24'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: ""
    Description: Launch in existing VPC

  ExistingPublicSubnetOne:
    Type: AWS::EC2::Subnet::Id
    Default: ""
    Description: existing public subnet one

  ExistingPublicSubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Default: ""
    Description: existing public subnet two

  ServiceName:
    Type: String
    Default: TGProxy
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: telegrammessenger/proxy:latest
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  SharedSecret:
    Type: String
    Default: 06ca8da33fee0139a84064f19b647d39
    Description: pre-shared secret string
  ContainerPort:
    Type: Number
    Default: 443
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc


Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]
  CreateVPC:  !Equals [!Ref 'VpcId', '']

Resources:
  # VPC in which containers will be networked.
  # It has two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Condition: CreateVPC
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Condition: CreateVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: 
        !If 
          - CreateVPC
          - !Ref 'VPC'
          - !Ref 'VpcId'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Condition: CreateVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: 
        !If 
          - CreateVPC
          - !Ref 'VPC'
          - !Ref 'VpcId'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Condition: CreateVPC
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Condition: CreateVPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        !If 
          - CreateVPC
          - !Ref 'VPC'
          - !Ref 'VpcId'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Condition: CreateVPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        !If 
          - CreateVPC
          - !Ref 'VPC'
          - !Ref 'VpcId'
  PublicRoute:
    Condition: CreateVPC
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Condition: CreateVPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Condition: CreateVPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the containers we will run in Fargate.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other members of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: 
        !If 
          - CreateVPC
          - !Ref 'VPC'
          - !Ref 'VpcId'
  EcsSecurityGroupIngressFromPublicNLB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public through NLB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: load_balancing.cross_zone.enabled
        Value: 'true'
      Subnets:
        !If
          - CreateVPC
          - 
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
          -
            - !Ref ExistingPublicSubnetOne
            - !Ref ExistingPublicSubnetTwo
            
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # HealthCheckPath: /
      HealthCheckProtocol: TCP
      # HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]
      Port: 443
      Protocol: TCP
      UnhealthyThresholdCount: 2
      VpcId: 
        !If 
          - CreateVPC
          - !Ref 'VPC'
          - !Ref 'VpcId'
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: TCP

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/ecs/${ServiceName}-${AWS::StackName}"
      RetentionInDays: 3

  TaskDefinitionCWL:
    # Condition: CWL
    DependsOn: 
      - LogGroup
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          Ulimits:
            - 
              Name: nofile
              SoftLimit: 65552
              HardLimit: 655520
          Environment:
            - 
              Name: SECRET
              Value: !Ref SharedSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  Service:
    Type: AWS::ECS::Service
    # DependsOn: LoadBalancerRule
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref 'FargateContainerSecurityGroup'
          Subnets:
            !If
              - CreateVPC
              - 
                - !Ref PublicSubnetOne
                - !Ref PublicSubnetTwo
              -
                - !Ref ExistingPublicSubnetOne
                - !Ref ExistingPublicSubnetTwo
      TaskDefinition: 
        # !If
        #   - NOCWL
        #   - !Ref 'TaskDefinitionNOCWL'
        !Ref 'TaskDefinitionCWL'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # HealthCheckPath: /
      HealthCheckProtocol: TCP
      # HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub "${ServiceName}-${AWS::StackName}"
      Port: 443
      Protocol: TCP
      UnhealthyThresholdCount: 2
      VpcId: 
        !If 
          - CreateVPC
          - !Ref 'VPC'
          - !Ref 'VpcId'

Outputs:
  NLBHostName:
    Description: The DNS Name of NLB for the Service
    Value: !Sub "${PublicLoadBalancer.DNSName}"
  ConnectionString:
    Description: Telegram Proxy connection URI
    Value: !Sub "https://t.me/proxy?server=${PublicLoadBalancer.DNSName}&port=443&secret=${SharedSecret}"
